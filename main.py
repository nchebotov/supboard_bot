import asyncio
import time
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery, ReplyKeyboardMarkup, KeyboardButton,
)

from config import BOT_TOKEN, ADMINS, SAPBOARDS, RENTAL_RATE
import database
import gsheet
import logging
import pytz



bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)


def get_saratov_time():
    return datetime.now(tz=pytz.timezone("Europe/Saratov"))

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class RentStates(StatesGroup):
    choosing_sapboard = State()
    entering_hours = State()
    confirming = State()
    waiting_for_sapboard_id = State()


# –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥
active_rentals = {}  # {sapboard_id: {"sapboard_id": ..., "sapboard_name": ..., "admin_id": ..., "admin_name": ..., "end_time": ..., "task": ...}}


# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ê—Ä–µ–Ω–¥–∞ –¥–æ—Å–∫–∏")],
        [KeyboardButton(text="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É –¥–æ—Å–∫–∏")],
        [KeyboardButton(text="–°—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="–ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
)


def is_admin(user_id):
    return user_id in ADMINS


def format_time(t):
    return t.strftime("%Y-%m-%d %H:%M")


@dp.startup()
async def on_startup():
    gsheet.init_sheet()


@dp.message(Command("start"))
async def cmd_start(message: Message):
    if is_admin(message.from_user.id):
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!\n –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.",
            reply_markup=main_keyboard
        )
    else:
        await message.answer(" –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


@dp.message(Command("help"))
async def cmd_help(message: Message):
    if not is_admin(message.from_user.id):
        return

    help_text = (
        f"üìå *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n"
        "/start ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
        "/rent ‚Äî –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∞—Ä–µ–Ω–¥—É (–≤—ã–±–æ—Ä –¥–æ—Å–∫–∏, –≤—Ä–µ–º–µ–Ω–∏)\n"
        "/status ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã\n"
        f"/end <ID –∫–ª–∏–µ–Ω—Ç–∞> ‚Äî –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É –≤—Ä—É—á–Ω—É—é. –°–ø–∏—Å–æ–∫ id=[{list(SAPBOARDS.keys())}]\n"
        "/export ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\n"
        "/history ‚Äî –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è\n"
        "/history sapboard=1 ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ —Å–∞–ø–±–æ—Ä–¥—É 1\n"
        "/history admin=123456789 ‚Äî —Ç–æ–ª—å–∫–æ –æ—Ç –∞–¥–º–∏–Ω–∞ —Å ID 123456789\n"
    )

    await message.answer(help_text, parse_mode="Markdown")


@dp.message(Command("rent"))
async def cmd_rent(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=name, callback_data=sid)]
            for sid, name in SAPBOARDS.items()
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ø–±–æ—Ä–¥:", reply_markup=keyboard)
    await state.set_state(RentStates.choosing_sapboard)


@dp.callback_query(StateFilter(RentStates.choosing_sapboard))
async def choose_hours(query: CallbackQuery, state: FSMContext):
    sapboard_id = query.data
    await state.update_data(sapboard_id=sapboard_id)
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –≤ —á–∞—Å–∞—Ö, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ 0.5 (30 –º–∏–Ω—É—Ç):")
    await state.set_state(RentStates.entering_hours)


@dp.message(StateFilter(RentStates.entering_hours))
async def confirm_rental(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        hours = float(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5, 1.5, 2 –∏ —Ç.–¥")
        return

    if hours < 0.5:
        await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã ‚Äî 0.5 —á–∞—Å–∞ (30 –º–∏–Ω—É—Ç). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    if 12 < hours:
        await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã ‚Äî 12 —á–∞—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    data = await state.get_data()
    sapboard_id = data["sapboard_id"]
    cost = RENTAL_RATE * hours

    await state.update_data(hours=hours, cost=cost)
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {SAPBOARDS[sapboard_id]} –Ω–∞ {hours} —á.\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.2f} —Ä—É–±.\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ])
    )
    await state.set_state(RentStates.confirming)


@dp.callback_query(StateFilter(RentStates.confirming))
async def process_confirmation(query: CallbackQuery, state: FSMContext):
    if not is_admin(query.from_user.id):
        await query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if query.data == "confirm":
        data = await state.get_data()
        sapboard_id = data["sapboard_id"]
        hours = data["hours"]
        user_id = query.from_user.id
        admin_id = query.from_user.id
        admin_name = query.from_user.full_name

        start_time = get_saratov_time()
        end_time = start_time + timedelta(hours=hours)

        database.add_rental_start(
            user_id,
            sapboard_id,
            SAPBOARDS[sapboard_id],
            admin_id,
            admin_name,
            start_time,
            end_time,
            hours,
            data["cost"]
        )

        gsheet.add_rental_to_sheet(
            user_id,
            sapboard_id,
            SAPBOARDS[sapboard_id],
            admin_id,
            admin_name,
            start_time,
            end_time,
            hours,
            data["cost"]
        )

        active_rentals[sapboard_id] = {
            "user_id": user_id,
            "sapboard_id": sapboard_id,
            "sapboard_name": SAPBOARDS[sapboard_id],
            "admin_id": admin_id,
            "admin_name": admin_name,
            "end_time": end_time,
            "task": asyncio.create_task(
                send_reminder(admin_id, end_time, sapboard_id, admin_name, user_id)
            )
        }

        await query.message.edit_text(
            f"‚úÖ –ê—Ä–µ–Ω–¥–∞ {SAPBOARDS[sapboard_id]} –Ω–∞—á–∞–ª–∞—Å—å!\n"
            f"–í—ã–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–æ–º: {admin_name} (ID: {admin_id})\n"
            f"–í–µ—Ä–Ω—É—Ç—å –¥–æ: {format_time(end_time)}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {data['cost']:.2f} —Ä—É–±."
        )

    else:
        await query.message.edit_text("‚ùå –ê—Ä–µ–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    await state.clear()


async def send_reminder(admin_id, end_time, sapboard_id, admin_name, user_id):
    now = get_saratov_time()
    delta = (end_time - now).total_seconds()
    if delta > 300:
        await asyncio.sleep(delta - 300)
        if user_id in active_rentals:
            await bot.send_message(
                admin_id,
                f"‚ö†Ô∏è –î–æ –∫–æ–Ω—Ü–∞ –∞—Ä–µ–Ω–¥—ã {SAPBOARDS[sapboard_id]} –æ—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç. "
                f"–ü–æ—Ä–∞ –∑–∞–±—Ä–∞—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞.\n"
                f"–í—ã–¥–∞–Ω–æ –∞–¥–º–∏–Ω–æ–º: {admin_name}"
            )
        await asyncio.sleep(300)

    if user_id in active_rentals:
        await bot.send_message(
            admin_id,
            f"üîö –ê—Ä–µ–Ω–¥–∞ {SAPBOARDS[sapboard_id]} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–∞–ø–±–æ—Ä–¥ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å."
        )
        del active_rentals[user_id]


@dp.message(Command("status"))
async def cmd_status(message: Message):
    if not is_admin(message.from_user.id):
        return

    now = datetime.now()
    expired = []

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞—Ä–µ–Ω–¥
    for user_id, info in list(active_rentals.items()):
        if info["end_time"] <= now:
            expired.append(user_id)
            del active_rentals[user_id]

    if not active_rentals:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥.")
        return

    text = "üïí –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã:\n"
    for user_id, info in active_rentals.items():
        text += (
            f"üë§ –ê–¥–º–∏–Ω: {info['admin_name']}\n"
            f"üë§ –ê–¥–º–∏–Ω ID: {info['admin_id']}\n"
            f"üõπ –°–∞–ø–±–æ—Ä–¥: {info['sapboard_name']}\n"
            f"üßë‚Äçüíº –°–∞–ø–±–æ—Ä–¥ ID: {info['sapboard_id']}\n"
            f"‚è∞ –í–µ—Ä–Ω—É—Ç—å –¥–æ: {format_time(info['end_time'])}\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )

    await message.answer(text)


@dp.message(F.text == "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É –¥–æ—Å–∫–∏")
async def ask_sapboard_id(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å–∞–ø–±–æ—Ä–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2):")
    await state.set_state(RentStates.waiting_for_sapboard_id)


@dp.message(RentStates.waiting_for_sapboard_id)
async def handle_end_rent(message: Message, state: FSMContext):
    sapboard_id = message.text.strip()

    found = None
    target_key = None

    for user_id, info in active_rentals.items():
        if info["sapboard_id"] == sapboard_id:
            found = info
            target_key = user_id
            break

    if not found:
        await message.answer(f"‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –∞—Ä–µ–Ω–¥–∞ –¥–ª—è —Å–∞–ø–±–æ—Ä–¥–∞ `{sapboard_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    rental_info = active_rentals.pop(target_key)
    rental_info["task"].cancel()

    await message.answer(f"‚úÖ –ê—Ä–µ–Ω–¥–∞ {rental_info['sapboard_name']} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await state.clear()


@dp.message(Command("export"))
async def cmd_export(message: Message):
    if not is_admin(message.from_user.id):
        return

    url = gsheet.get_sheet_url()
    await message.answer(f"üìä –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—Ä–µ–Ω–¥—ã: [–æ—Ç–∫—Ä—ã—Ç—å –≤ Google Sheets]({url})", parse_mode="Markdown")


@dp.message(Command("history"))
async def cmd_history(message: Message):
    if not is_admin(message.from_user.id):
        return

    args = message.text.split()
    filters = {"sapboard": None, "admin": None}

    for arg in args[1:]:
        if arg.startswith("sapboard="):
            filters["sapboard"] = arg.split("=")[1]
        elif arg.startswith("admin="):
            filters["admin"] = arg.split("=")[1]

    all_rentals = database.get_all_rentals()

    filtered = []
    for r in all_rentals:
        _, user_id, sapboard_id, sapboard_name, admin_id, admin_name, start, end, duration, cost = r

        match = True
        if filters["sapboard"] and sapboard_id != filters["sapboard"]:
            match = False
        if filters["admin"] and str(admin_id) != filters["admin"]:
            match = False

        if match:
            filtered.append({
                "user_id": user_id,
                "sapboard_id": sapboard_id,
                "sapboard_name": sapboard_name,
                "admin_id": admin_id,
                "admin_name": admin_name,
                "start": start,
                "end": end,
                "duration": duration,
                "cost": cost
            })

    if not filtered:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        return

    text = "üìú –ò—Å—Ç–æ—Ä–∏—è –∞—Ä–µ–Ω–¥:\n\n"
    for entry in filtered[:10]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
        text += (
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {entry['user_id']}\n"
            f"üõπ –°–∞–ø–±–æ—Ä–¥: {entry['sapboard_name']}; id=({entry['sapboard_id']})\n"
            f"üßë‚Äçüíº –ê–¥–º–∏–Ω: {entry['admin_name']} (ID: {entry['admin_id']})\n"
            f"üìÖ –ù–∞—á–∞–ª–æ: {entry['start']}\n"
            f"üïí –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {entry['duration']:.2f} —á.\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {entry['cost']:.2f} —Ä—É–±.\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )

    if len(filtered) > 10:
        text += f"\n... –∏ –µ—â—ë {len(filtered) - 10} –∑–∞–ø–∏—Å–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è."

    await message.answer(text)


@dp.message(F.text == "–ê—Ä–µ–Ω–¥–∞ –¥–æ—Å–∫–∏")
async def btn_rent(message: Message, state: FSMContext):
    await cmd_rent(message, state)


@dp.message(F.text == "–°—Ç–∞—Ç—É—Å")
async def btn_status(message: Message):
    await cmd_status(message)


@dp.message(F.text == "–ü–æ–º–æ—â—å")
async def btn_help(message: Message):
    await cmd_help(message)


async def main():
    print("–ñ–¥—ë–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞...")
    time.sleep(30)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.info("–ë–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç...")
    database.init_db()
    asyncio.run(main())
